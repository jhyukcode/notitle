1. SPRING
  ## SPRING
    (0) JSP
      1. mvc1 - jsp(controller) 역할
      2. mvc2 - servlet(controller) 역할
      3. frontcontroller
    (1) framework
      1. framework [ 디자인패턴 + 라이브러리 = 프레임워크 ]
      2. 소프트웨어 개발의 뼈대역할
    (2) ioc + di
      - inversion of control
      - 제어의 역전
      - 인스턴스의 생성~소멸까지 생명주기를 개발자가 아니라 컨테이너가 하는 것
      - pojo(plain old java object)

  ## di (dependency injection : 의존성 주입)
    - 각 클래스간의 의존 관꼐를 [설정파일]을 통해 [컨테이너]가 자동으로 연결
      > 장점 : 코드 단순화 / 결합도 제거


      Class A{}
      A a1 = new A()

      생성 → 초기화 → 서비스 → 소멸
       ↑                       ↓
    -------------------------------
      ioc가 아닌 경우 [ 개발자 → (Class A)
                              → (Class B)
                               → (Class C) ] 컨테이너
      ioc인 경우      [ 개발자 ← (Class A)
                               ← (Class B)
                                ← (Class C)] 컨테이너



    - 실습 : 설치
      버전 다운그레이드
      java.sun.com - java11 / build path
      스프링 3버전 다운로드
      다운로드 경로 : https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3
      압축 - 경로짧게 / 공백, 한글, 특수기호(-) : 경로에서 제외

    - 실습 : 설정
      1. dynamic web project - spring000
      2. configure  - [Convert to Maven Project]
      3. spring      - add Spring project Nature
      4. java se-11 / project facts, build path
      5. build path - add Libaries - JUnit4

      구조 확인
        1. pom.xml 설치 다운로드
        2. src/main/java 실제 자바파일 위치
        3. src/test/java 실제 테스트파일 위치
        4. src/main/webpp jsp 파일 위치

      연습문제 spring001_di 프로젝트 만들기

    - 실습 : spring mvc
      1. 검색 : spring
      2. legacy project
      3. mvc project
      > 플러그인
       \.metadata\.plugins\org.springsource.ide.eclipse.commons.content.configure
       
      import 해서 완성된 파일 가져오기

    - 실습 : 정리
      1. 프레임워크
        > 소프트웨어 개발의 뼈대역할 [ 디자인패턴 + 라이브러리 ]
      2. ioc
        > 인스턴스 생성~소멸까지 생명주기를 스프링이 관리
      3. di
        > 각 클래스의 의존 관계를 [설정파일]을 통해 컨테이너가 자동연결
      4. bean
        > 스프링이 관리하는 객체
        beanFactory <- ApplicationContext
      5. build path
        > add Libaries - JUnit4
      6. pom.xml
        > JUnit, context, spring-test
      7. 구성확인
        [AnimalFarm] (사용)-> [<<interface>>Animal]
            ↑삽입               ↑구현      ↑구현
        [beans.xml] (생성) -> [Cat/Dog]

      di : 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동 연결

  ## bean
    1. bean
      (1) bean spring이 관리하는 객체
      (2) xml, vs Annotation
        -xml [운영]
          모든 bean을 명시적으로 xml 등록
          여러 개발자가 같은 성정 파일을 공유해서 개발하면 수정시 충돌이 일어날 경우가 많음

        -Annotation (Bean Sacnning) [개발]
          Bean @을 붙여서 자동 인식
          개발속도 향상
          Bean간의 의족관계를 파아갛기 힘듦
    2. Component
      1. @Component 일반적인 컴포넌트
      2. @Component 구체화된 형식 @Controller(웹요청받아서 응답)
                                 @Service(비즈니스로직), @Repository(db연동)
      <context:compnent-scan base-package="경로"/>

  ## DB/MYBATIS
    1. DataSource
      SimpleDriverDataSource 가장단순버전
        -getConnection() 매번 생성
        > mysql-connector-java / spring-jdbc
        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.3.20.RELEASE</version>
        </dependency>
    2. Mybatis
      1. sql을 별도로 파일 분리해서 관리
      2. ORM(Object Relationalm Mapping) 프레임워크
      3. mybatis

        SqlSessionFactoryBean
             ↓
        SqlSessionFactory -> <<SqlSession>> -> mapper.xml
                              (insert, update, delete, select)
        SqlSessioFactory : SqlSession 생성관리
        SqlSession : sql실행, 트랜잭션

    실습
    mybatis
    mybatis-spring
    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
    <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.5.6</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
    <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>2.0.6</version>
    </dependency>

    ## mapper 설정파일(1)
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <mapper namespace="org.mybatis.example.BlogMapper">
   </mapper>
   
   ## mapper 설정파일(2)  
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
   </configuration>

    UserDto
    [com.company.dto] - UserDto
    private int no;
    private String name;
    private int age;

    // 생성자, tostring, getters/setters

    DAO (UserDao, UserDaoImpl, user-mapper.xml)
