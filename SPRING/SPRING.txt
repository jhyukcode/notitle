1. SPRING
  ## SPRING
    (0) JSP
      1. mvc1 - jsp(controller) 역할
      2. mvc2 - servlet(controller) 역할
      3. frontcontroller
    (1) framework
      1. framework [ 디자인패턴 + 라이브러리 = 프레임워크 ]
      2. 소프트웨어 개발의 뼈대역할
    (2) ioc + di
      - inversion of control
      - 제어의 역전
      - 인스턴스의 생성~소멸까지 생명주기를 개발자가 아니라 컨테이너가 하는 것
      - pojo(plain old java object)

  ## di (dependency injection : 의존성 주입)
    - 각 클래스간의 의존 관꼐를 [설정파일]을 통해 [컨테이너]가 자동으로 연결
      > 장점 : 코드 단순화 / 결합도 제거


      Class A{}
      A a1 = new A()

      생성 → 초기화 → 서비스 → 소멸
       ↑                       ↓
    -------------------------------
      ioc가 아닌 경우 [ 개발자 → (Class A)
                              → (Class B)
                               → (Class C) ] 컨테이너
      ioc인 경우      [ 개발자 ← (Class A)
                               ← (Class B)
                                ← (Class C)] 컨테이너



    - 실습 : 설치
      버전 다운그레이드
      java.sun.com - java11 / build path
      스프링 3버전 다운로드
      다운로드 경로 : https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3
      압축 - 경로짧게 / 공백, 한글, 특수기호(-) : 경로에서 제외

    - 실습 : 설정
      1. dynamic web project - spring000
      2. configure  - [Convert to Maven Project]
      3. spring      - add Spring project Nature
      4. java se-11 / project facts, build path
      5. build path - add Libaries - JUnit4

      구조 확인
        1. pom.xml 설치 다운로드
        2. src/main/java 실제 자바파일 위치
        3. src/test/java 실제 테스트파일 위치
        4. src/main/webpp jsp 파일 위치

      연습문제 spring001_di 프로젝트 만들기

    - 실습 : spring mvc
      1. 검색 : spring
      2. legacy project
      3. mvc project
      > 플러그인
       \.metadata\.plugins\org.springsource.ide.eclipse.commons.content.configure
       
      import 해서 완성된 파일 가져오기

    - 실습 : 정리
      1. 프레임워크
        > 소프트웨어 개발의 뼈대역할 [ 디자인패턴 + 라이브러리 ]
      2. ioc
        > 인스턴스 생성~소멸까지 생명주기를 스프링이 관리
      3. di
        > 각 클래스의 의존 관계를 [설정파일]을 통해 컨테이너가 자동연결
      4. bean
        > 스프링이 관리하는 객체
        beanFactory <- ApplicationContext
      5. build path
        > add Libaries - JUnit4
      6. pom.xml
        > JUnit, context, spring-test
      7. 구성확인
        [AnimalFarm] (사용)-> [<<interface>>Animal]
            ↑삽입               ↑구현      ↑구현
        [beans.xml] (생성) -> [Cat/Dog]

      di : 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동 연결

  ## bean
    1. bean
      (1) bean spring이 관리하는 객체
      (2) xml, vs Annotation
        -xml [운영]
          모든 bean을 명시적으로 xml 등록
          여러 개발자가 같은 성정 파일을 공유해서 개발하면 수정시 충돌이 일어날 경우가 많음

        -Annotation (Bean Sacnning) [개발]
          Bean @을 붙여서 자동 인식
          개발속도 향상
          Bean간의 의족관계를 파아갛기 힘듦
    2. Component
      1. @Component 일반적인 컴포넌트
      2. @Component 구체화된 형식 @Controller(웹요청받아서 응답)
                                 @Service(비즈니스로직), @Repository(db연동)
      <context:compnent-scan base-package="경로"/>

  ## DB/MYBATIS
    1. DataSource
      SimpleDriverDataSource 가장단순버전
        -getConnection() 매번 생성
        > mysql-connector-java / spring-jdbc
        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.28</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>4.3.20.RELEASE</version>
        </dependency>
    2. Mybatis
      1. sql을 별도로 파일 분리해서 관리
      2. ORM(Object Relationalm Mapping) 프레임워크
      3. mybatis

        SqlSessionFactoryBean
             ↓
        SqlSessionFactory -> <<SqlSession>> -> mapper.xml
                              (insert, update, delete, select)
        SqlSessioFactory : SqlSession 생성관리
        SqlSession : sql실행, 트랜잭션

    실습
    mybatis
    mybatis-spring
    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
    <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.5.6</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
    <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>2.0.6</version>
    </dependency>

    ## mapper 설정파일(1)
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <mapper namespace="org.mybatis.example.BlogMapper">
   </mapper>
   
   ## mapper 설정파일(2)  
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
   </configuration>

    UserDto
    [com.company.dto] - UserDto
    private int no;
    private String name;
    private int age;

    // 생성자, tostring, getters/setters

    DAO (UserDao, UserDaoImpl, user-mapper.xml)

  ## mvc project
    1. mvc
      > 서로 영향없이 쉽게 고칠 수 있는 애플리케이션 제작
      Model 정보 : dto, dao, serivce
      View 화면 : html, css, js/jquery
      Controller 처리 : request, execute, response
    2. mvc1 vs mvc2
      mvc1 : controller의 역할을 jsp가 담당
      mbc2 = controller의 역할을 servlet이 담당
    3.  SPRING MVC
    [클라이언트]
    ↓ ① list.do
    [FrontController]
    <<DispatcherServlet>>  → ② HandlerMapping   - @Controller
                  ↓   
                    ③ 세부Controller  - db가 db처리                         
        ↓↑
            ④  View

      ① 클라이언트 ( 코요테 - web.xml  - root-coontext.xml / servet-context.xml / DispatcherServlet)
      ② DispatcherServlet   - HandlerMapping   - @Controller / 처리할 Controller 확인
      ③ 세부Controller  클라이언트 요청처리 (service - 비지니스로직)
      ④ 요청결과와 View정보를  DispatcherServlet 줌  / View를 개체를 생성해서 응답


      1. 실습
      1) pom.xml   spring-webmvc 등록  
      2) web.xml   ContextLoaderListener (스프링구동)  / DispatcherServlet (Frontcontroller)
              root-coontext.xml (db설정) / servet-context.xml (view servlet 설정)
      3) config/servet-context.xml 

      2. 실습
      1) spring010_mvc 프로젝트만들기
      2) pom.xml
        <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>3.2.17.RELEASE</version>
        </dependency>

      3) web.xml
        ContextLoaderListener(spring 구동) / DispatcherServlet (Frontcontroller)
        root-context.xml(db 설정) / servlet-context.xml(view servlet 설정)
      4) servlet.xml
        4-1. @Cotroller 위치
        <context:component-scan base-package="com.company.controller" />
        4-2. Model model ( 처리결과 )
        <mvc:annotation-driven />
        4-3. ViewResolver
        <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
          <property name="prefix" value="/" />
          <property name="suffix" value=".jsp" />
        </bean>


      1. spring009_ex_board 복사하기  spring001_ex_board
      2. web-mvc 셋팅
      3. 다음과 같이 controller 설정
      /board/list → board/list.jsp
      /board/create → board/write.jsp
      /board/detail → board/detail.jsp
      /board/edit → board/edit.jsp
      /board/delete → board/delete.jsp


        ## mapper 설정파일(1)
        [Preferences] - [Xml] - Templates - New - New XML
        <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE mapper
          PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
          "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
        <mapper namespace="org.mybatis.example.BlogMapper">
        </mapper>
        
        ## mapper 설정파일(2)  
        [Preferences] - [Xml] - Templates - New - New XML
        <?xml version="1.0" encoding="UTF-8" ?>
        <!DOCTYPE configuration
          PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
          "https://mybatis.org/dtd/mybatis-3-config.dtd">
        <configuration>
        </configuration>

## 7. 유용한 기능들
  1. jstl
  2. dto -> lombok
  3. aop(관점지향)
  4. HikariCP (dbcp/sql과정 다 보이게)
  5. Tx (sql 여러개 실행될 떄 중간에서 실패 시 sql 처리 X)

    (1) jstl
     > pom.xml
      <!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>jstl</artifactId>
          <version>1.2</version>
        </dependency>
    (2) Model
      -table
      -dto UserDto/mapper-config.xml
      -dao UserDao/user-mapper.xml/root-context.xml(등록)
    (3) @Repository - Dao(sql 실행)
      @Serivce -
          상세보기 : 조회수 올리는 sql / 해당 번호 상세보기 데이터
          수정보기 : -                / 해당 번호 상세보기 데이터
          글쓰기 : 이미지 올리기 기능 / 그 이미지 이름 경로 및 데이터 인서트 시 저장

    lombok
        0. https://mvnrepository.com/artifact/org.projectlombok/lombok
    1. https://projectlombok.org/download
    2. 다운로드
    3. 더블클릭 /   cmd창     java  -jar    파일이름.jar
        설치경로 설정
    4. spring 다시 열기

    ※ 만약 인식이 안되면....
      1. C드라이브로 스프링zip. 옮기기 - 압축풀기
      2. 경로 짧게

    Aspect
    AOp Apsect Orineted Programming
    Aspect : 관점, 어떤 행동, 시작, 완료, 반복 등 나타내는 형태
    Advice 부가기능정의 +적용부위 = Aspect
     
    용어
    Taget 대상
    Advice 부가기능정의
    PotintCut 적용 타겟에 메서드로 대상을 선별하는 정규식
    Weaving Target에 Advice를 처리하는 과정

    특징
    프록시 기반의 aop
    프록시(대리)
    프록시 대상에 부가기능을 처리하는 과정에서 생성되는 객체

    호출 -> [Proxy(Target)] 

    HikariCP (dbcp/sql 과정 다 보이게)
      1. pom.xml
      2. db.properties / root-context.xml
      3. hikari properties 설정



    Tx (sql 여러개 실행될 떄 중간에 실패하면 sql 다 처리 안되게)
      트랙잭션
      여러 단계의 처리를 하나의 처리처럼 다루는 기능들
      반영 (commit) / 되돌리기 (rollback)
        > pom.xml
      <dependency>
         <groupId>org.springframework</groupId>
         <artifactId>spring-tx</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>
        > root-context.xml
      DataSourceTransactionManager
      <tx:annotation=driven/>