1. CLASS
  (1) 자바의 저장 단위
    - 변수 < 배열 < 클래스명
  (2) 객체의 특징
    - 부품객체
    - 상태(멤버변수)와 행위(멤버함수)를 갖는다

  OOP란??
    - 객체	지향	프로그래밍
    - Object Oriented Programming
    - 클래스(부품객체)를 조립해서 완성해가는 프로그램
  CLASS vs INSTANCE
    - 클래스(설계도) 틀로 여러 개의 객체(인스턴스)들을 만들 수 있음
    - 붕어빵 기계(설계도) --> 붕어빵들(객체)
      인스턴스화(heap:실제 만들었는지 확인), 인스턴스 : 각각의 특징
    - 클래스(부품객체) 특징에 맞게 코딩
    - 상태(멤버변수)와 행위(멤버함수)

2-1. 생성자 
  (1) 생성자
    - new 연산자에 의해 호출 [초기화] 담당
  (2) 기본 생성자 (디폴트 생성자)
    - 모든 클래스에 생성자가 반드시 존재
    - 생성자 선언을 생략 시 컴파일러가 자동으로 기본 생성자를 추가
    - 개발자가 선언 시 컴파일러가 자동 생성 취소

2-2. 생성자 형식
  class A{
    public A(){}    기본생성자
    public A(String name){}   파라미터 알규먼트가 있는 생성자
  }
  (1) 리턴값 없음 >  리턴값 메서드명(파라미터)
  (2) 클래스명과 동일
  (3) 기본 생성자를 생성해야 하는 경우 : 오버로딩, 상속

3. static
  (1) runtime data area
    - method : 정보저장, static final
    - heap : 동적저장 - new, garbage collector가 처리소멸
    - stack : 임시값 저장

  (2) static
    - jvm 소스 로딩 시 메모리를 할당 받음
    - new 연산자보다 먼저 실행되어 메모리(method영역:runtime)에 1회 생성
    - 클래스명.변수명 / 클래스명.메서드명 - 클래스변수/클래스메서드
    - 객체 생성과 관련이 없음
    - 인스턴스로 접근 시 권장사항이 아니므로 경고 발생

4. 초기화 순서
  기본값      명시적 초기화         초기화 블록       생성자

  (1) 기본값
    > String, 객체 - null
    > int - 0
  (2) 명시적 초기화 
    > int a = 10;
    - 중요 콘텐츠 명시적으로 알림
  (3) 초기화 블록 
    > { a = 10; b = 10;}
    - 여러 개 초기화 시
  (4) 생성자
    - 최종은 생성자에서 사용함
    - 인스턴스 변수 초기화

5. 지정 접근자
  - 클래스 및 구성 요소에 대한 접근 제한 역할
                          클래스내부  패키지  하위클래스  그외
    public                O           O      O          O        
    protected             O           O      O(extneds) X
    default(package)      O           O      X
    private               O           X      X          X

6. 클래스 배열
  클래스[] 배열명 = new 클래스[];
  클래스 배열 내에 값 입력 시
  생성자를 호출하여 인스턴스 변수를 초기화 해 사용 가능하게 만들어야 함
  배열명[배열넘버] = new 클래스명();