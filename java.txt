1. java
  - 프로그래밍 언어
  - 사람이 작성한 코드를 컴퓨터가 이해할 수 있는 명령어를 작성하는 도구
  - 정부나 기업의 SI(시스템 통합프로젝트)가 대부분 자바로 구현
  - jvm : java virtual machine
    운영 체제와 하드웨어에 관계없이 실행
  - OOP

2. OOP
  - object oriented programming
  -부품 객체(class)를 조립해서 만들어가는 프로그래밍 기법

  part1. control
    - 변수 / 자료형 / 제어문 ( if/switch/for, while, do while) / array / method

  part2. oop 특징
    - class / static, final, modifier / 상속 / abstract, interfaace / 예외 처리

  part3. oop 활용
    -collection (ArrayList), Thread, lambda + Stream / io / network

3. 설치 java
  (1) java.sun.com 다운로드 후 설치
    - JDK 17.0.14
    - jdk-17.0.14_windows-x64_bin.exe

  (2) java path 설정
    - JAVA_HOME : C:\Program Files\Java\jdk-17
    - path : %JAVA_HOME%\bin

  * [내컴퓨터] > 오른쪽 마우스 > 속성 > [고급 시스템 설정] > [고급]
    > [환경변수설정] > 시스템 변수 > [새로 만들기]

  (3) java 설치 확인
    - cmd > "java -version"

4. 설치 eclipse
  (1) eclipse.org > 다운로드 > java EE

  (2) 작업환경(workspace)
      - D:\java_2025
      * [window] - [perspective] - java
      * [window] - [preferences] - 검색 : enc

5. 프로그램 작성 (동작)
  (1) 소스 파일(개발자) > 컴파일(번역) > 바이트코드(컴퓨터)
      .java                               .class
      A001.java     --javac A001.java--  A001.class

  * 자바프로젝트 : File -new - java project
    - ■프로젝트이름 /  ■JRE - JavaSE-17

  * 패키지 : 프로젝트- src - 오른쪽마우스 - new- package
    - com.회사명.프로젝트명.작업단위
    - ex com.company.java001

  * 자바파일(부품객체) : 패키지 - 오른쪽마우스 - new- class
    - 클래스명 대문자
    - ctrl +   (화면크게)  / ctrl -  (화면작게)   
    - 한줄 : ctrl + alt + j

6. git 연결
  (1) 폴더 만들기 - D:\java_2025

  (2) source tree

  * 집 컴퓨터에 java, eclipse, git, sourcetree 설치 (~25.02.21)

7. 출력 ( printlf, print, printf)
  System.out.println("문자열");
  (1) System.out.println("A\nAB\nABC");
    * \n 줄바꿈

  (2) System.out.print("A\nAB\nABC");
    * println : 내용이 끝나면 자동 줄바꿈 , print : 내용이 끝나도 줄바꿈을 하지 않음

  (3) System.out.printf("내 나이%d, 내이름%s, 좋아하는 숫자 파이 %.2f", 10, "string", 3.14 );
    * %d : 숫자정수, %s : 문자열, %.nf : n 만큼 소수점 아래 출력 (실수)

8. 출력 (2) + 의미, ()
  (1) System.out.println(1+2);
  * = "3"

  (2) System.out.println(1+2"+"+3+4);
    * = "3+7"

  (3) System.out.println(""+1+2);
    * = "12"
     
      <1> + : 연산(더하기)
      <2> 숫자+숫자 : 연산
      <3> 숫자+문자, 문자+숫자 : 출력

9-1. 변수
  (1) 값
    - 토큰 : 특정 의미를 가진 문자열
      * 리터럴, 키워드, 식별자, 연산자 ,구분자
  (2) 값의 보관
    - 값의 보관 == 메모라 확보
    - 변수 : 변하는 수 (오픈박스)
    - 상수 : 변하지 않는 수 (밀봉박스)
    - 변수 이름 규칙 : $_소문자7

9-2. 변수 사용법
  자료형  변수명
  int a;    정수 1,2,3  a[]
  double b; 실수 .123  b[]
  a = 10; a[10]
  a = 20;, a[20]

  * 상수
  fianl in JAVA_HOME; 수정불가

10-1. 자료형
  (1) 자료형의 구분
    - 기본형 : 실제값 저장
    - 참조형 : 주소값 저장
  
  (2) 기본 자료형
    - 논리형 : boolean T/F
    - 정수형 : btye - short - int - long(long n = 1L;)  (1-2-4-8)
    - 실수형 : float(n = 3.14f) - double (4-8)

   (3) 자바 기본 처리 단위
    *1 정수 < 실수, float f = 1L;

10-2. 자료형
  (1) 기본형
    - 논리형 : boolean(true/false)
    - 정수형 : byte[1]-short[2]-*int[4]-long[8]
    - 실수형 : float[4](~.nf)-*double[8]
  
  (2) 형변환
    - 데이터 타입을 다른 타입으로 변환하는 것
    - boolean을 제외하고 변환 가능
    - 자동 타입 변환 (작은타입->큰타입) / 강제 타입 변환
      - float, int
      > 자동 타입 변환
        byte by=1;  by      [ ]
        int in=0;   in[ | | | ]
        in=by;
      > 강제 타입 변환
        int in=0;   in[ | | | ]
        byte by=1;  by      [ ]
        by=in; =error
        solution : by=(byte)in;

  (3) char
    - 저장은 숫자, 출력은 문자
    -문자열에서 문자 처리
    - 유니코드[2byte]
     char ch1 = ' ';
     char ch2 = '\u0000'; -유니코드\u0000
    
# 자바 자료형 범위 찾아보기

11. 연산자
  (1) 연산
    - 데이터를 처리해서 결과 값을 산출하는 과정
  
  (2) 종류
    - 먼저 값을 구하고 / 비교 / 조건 처리 후 / 대입
      : +, -, *, /, %
      : <, >, <=, >=, ==, !=
      : &&, ||, ?:
      : =, +=
    
  (3) 필수 조건
    - 

12. 조건문
  (1) 프로그램 코드 실행 흐름
    - 위 > 아래, 왼쪽 > 오른쪽
    - 제어문은 개발자가 원하는 방향으로 변경할 수 있도록 도와줌

  (2) 제어문의 종류
    - 조건문 : if, switch
    - 반복문 : for, while, do while
    - 제어 키워드 : break, continue

  * for( 초기문; 조건문; 증감문 ) { 반복해야 하는 내용 }- 반복 횟수를 알고 있을 떄

  * while( 조건문 ){ 반복해야 하는 내용 } - 반복 횟수를 모를 떄 ex.게시판
    > 초기문; while (조건문 ) { 반복해야 하는 내용  증감문;}

  * do {반복해야 하는 내용 } while ( 조건문 ); - 무조건 1번은 실행
    > 초기문; do { 반복해야 하는 내용 증감문; } while ( 조건문 );
    